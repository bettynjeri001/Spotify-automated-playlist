import os
from dotenv import load_dotenv
import spotipy
from spotipy.oauth2 import SpotifyOAuth

# Load environment variables from .env file
load_dotenv()

class SpotifyPlaylistGenerator:
    def __init__(self):
        # Get credentials from environment
        self.client_id = os.getenv("SPOTIPY_CLIENT_ID")        
        self.client_secret = os.getenv("SPOTIPY_CLIENT_SECRET") 
        self.redirect_uri = os.getenv("SPOTIPY_REDIRECT_URI")
        # Validate credentials
        if not all([self.client_id, self.client_secret, self.redirect_uri]):
            raise ValueError("Missing Spotify API credentials in environment variables")
        
        # Define the access scope
        self.SCOPE = "user-top-read playlist-modify-public playlist-modify-private"
        
        # Set up Spotipy authentication
        self.sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
         client_id=os.getenv("SPOTIPY_CLIENT_ID"),
         client_secret=os.getenv("SPOTIPY_CLIENT_SECRET"),
         redirect_uri="http://127.0.0.1:8080",  # Changed to common port 8080
         scope="user-library-read playlist-modify-private",
         cache_path=".spotipy_cache",  # Persistent token caching
         show_dialog=True  # Forces login prompt for debugging
))
        # self.sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
        #     client_id=self.client_id, 
        #     client_secret=self.client_secret,
        #     redirect_uri=self.redirect_uri,
        #     scope=self.SCOPE,
        #     show_dialog=True,
            

       # ))
    
    def get_top_tracks(self, limit=20, time_range='medium_term'):
        """
        Fetch user's top tracks.
        :param limit: Number of top tracks (max 50)
        :param time_range: 'short_term', 'medium_term', or 'long_term'
        :return: List of track objects
        """
        if not 1 <= limit <= 50:
            raise ValueError("Track limit must be between 1 and 50")
            
        results = self.sp.current_user_top_tracks(limit=limit, time_range=time_range)
        return results['items']
    
    def create_playlist(self, name, public=True, description="Generated by Python 🎵"):
        """
        Create a new Spotify playlist.
        :param name: Playlist name
        :param public: Boolean for visibility
        :param description: Playlist description
        :return: Playlist ID
        """
        user_id = self.sp.current_user()['id']
        playlist = self.sp.user_playlist_create(
            user=user_id,
            name=name,
            public=public,
            description=description
        )
        return playlist['id']
    
    def add_tracks_to_playlist(self, playlist_id, track_ids):
        """
        Add a list of track IDs to a Spotify playlist.
        :param playlist_id: Spotify playlist ID
        :param track_ids: List of Spotify track IDs
        """
        if not track_ids:
            raise ValueError("No tracks to add to playlist")
            
        self.sp.playlist_add_items(playlist_id, track_ids)
    
    def filter_tracks_by_genre(self, tracks, genres):
        """
        Filter a list of track objects based on artist genres.
        :param tracks: List of Spotify track objects
        :param genres: List of genres (e.g., ['pop', 'rock'])
        :return: Filtered list of track objects
        """
        if not genres:
            return tracks
            
        filtered_tracks = []
        for track in tracks:
            artist_id = track['artists'][0]['id']
            artist = self.sp.artist(artist_id)
            artist_genres = [g.lower() for g in artist.get('genres', [])]
            
            # Check if any of the desired genres are found in the artist's genres
            if any(genre.lower() in artist_genres for genre in genres):
                filtered_tracks.append(track)
        
        return filtered_tracks
    
    def run(self):
        print("🎧 Spotify Automated Playlist Generator")
        
        # User Input
        playlist_name = input("Enter playlist name: ").strip()
        if not playlist_name:
            print("❌ Playlist name cannot be empty")
            return
            
        while True:
            track_limit = input("How many top tracks to fetch (1–50)? ").strip()
            try:
                track_limit = int(track_limit)
                if 1 <= track_limit <= 50:
                    break
                print("Please enter a number between 1 and 50")
            except ValueError:
                print("Invalid input. Please enter a number")
        
        genres_input = input("Enter genres to filter by (comma separated, e.g., pop, rock, rap): ").strip()
        genres = [genre.strip().lower() for genre in genres_input.split(',') if genre.strip()]
        
        # Fetch top tracks from Spotify
        print("📡 Fetching your top tracks from Spotify...")
        try:
            top_tracks = self.get_top_tracks(limit=track_limit)
        except Exception as e:
            print(f"❌ Error fetching top tracks: {str(e)}")
            return
        
        # Filter tracks by the selected genres
        print(f"🎼 Filtering tracks by genres: {', '.join(genres) if genres else 'all genres'}")
        genre_filtered_tracks = self.filter_tracks_by_genre(top_tracks, genres)
        
        if not genre_filtered_tracks:
            print(f"❌ No tracks found for the genres {', '.join(genres)}. Please try another combination.")
            return
        
        # Extract track IDs for the playlist
        track_ids = [track['id'] for track in genre_filtered_tracks]
        
        # Create the playlist
        print("📂 Creating playlist...")
        try:
            playlist_id = self.create_playlist(
                name=playlist_name,
                description=f"Top {track_limit} tracks filtered by {', '.join(genres) if genres else 'all genres'}"
            )
        except Exception as e:
            print(f"❌ Error creating playlist: {str(e)}")
            return
        
        # Add filtered tracks to the playlist
        print("➕ Adding tracks to playlist...")
        try:
            self.add_tracks_to_playlist(playlist_id, track_ids)
        except Exception as e:
            print(f"❌ Error adding tracks to playlist: {str(e)}")
            return
        
        # Success message
        print(f"✅ Playlist '{playlist_name}' created with {len(track_ids)} tracks matching {', '.join(genres) if genres else 'all genres'}!")

if __name__ == "__main__":
    try:
        generator = SpotifyPlaylistGenerator()
        generator.run()
    except Exception as e:
        print(f"❌ An error occurred: {str(e)}")